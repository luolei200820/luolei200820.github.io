import{_ as n,p as s,q as a,a1 as p}from"./framework-6f85e614.js";const t="/assets/classes-orgnization-f3c48b27.jpg",e={},o=p(`<h1 id="第2章-变量" tabindex="-1"><a class="header-anchor" href="#第2章-变量" aria-hidden="true">#</a> 第2章 变量</h1><h2 id="_2-1-变量简介" tabindex="-1"><a class="header-anchor" href="#_2-1-变量简介" aria-hidden="true">#</a> 2.1 变量简介</h2><h3 id="_2-1-1-为什么需要变量" tabindex="-1"><a class="header-anchor" href="#_2-1-1-为什么需要变量" aria-hidden="true">#</a> 2.1.1 为什么需要变量</h3><p>变量是程序的基本组成单位</p><p>不论是使用哪种高级程序语言编写的程序，变量都是其程序的基本组成单位，比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 变量有三个基本要素（类型 + 名称 + 值）</span>
<span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 定义了一个变量，类型int整形,名称a,值是1</span>
      <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 定义了一个变量，类型int整形,名称b,值是3</span>
      b <span class="token operator">=</span> <span class="token number">89</span><span class="token punctuation">;</span> <span class="token comment">// 把89值赋给b</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出a变量的值</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出b变量的值</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-2-变量的介绍" tabindex="-1"><a class="header-anchor" href="#_2-1-2-变量的介绍" aria-hidden="true">#</a> 2.1.2 变量的介绍</h3><p>变量相当于内存一个数据存储空间的表示，你可以把变量看做是一个房间的门牌号，通过门牌号我们可以找到房间，而通过变量名可以访问到变量（值）</p><h3 id="_2-1-3-变量使用的步骤" tabindex="-1"><a class="header-anchor" href="#_2-1-3-变量使用的步骤" aria-hidden="true">#</a> 2.1.3 变量使用的步骤</h3><ol><li>声明变量 <blockquote><p>int a;</p></blockquote></li><li>赋值 <blockquote><p>a = 60; // 应该这么说：把60赋给a</p></blockquote></li><li>使用System.out.println(a);</li></ol><p>也可以一步到位：<code>int a = 60;</code> 通常我们是一步完成的</p><h3 id="_2-1-4-变量使用的注意事项" tabindex="-1"><a class="header-anchor" href="#_2-1-4-变量使用的注意事项" aria-hidden="true">#</a> 2.1.4 变量使用的注意事项</h3><ol><li>变量表示内存中的一个存储区域【不同的数据类型使用的空间大小不一样，比如int占4个字节，double占8个字节】</li><li>该区域有自己的名称【变量名】和类型【数据类型】</li><li>变量必须先声明后使用</li><li>该区域的数据可以在同一类型范围内不断变化</li><li>变量在同一个作用域不可以重名</li><li>变量 = 变量名 + 值 + 数据类型，变量三要素</li></ol><h3 id="_2-1-5-程序中-号的使用" tabindex="-1"><a class="header-anchor" href="#_2-1-5-程序中-号的使用" aria-hidden="true">#</a> 2.1.5 程序中&quot;+&quot;号的使用</h3><ol><li>当左右两边都是数值类型时，则做加法运算</li><li>当左右两边一方是字符串，则做拼接运算</li></ol><h2 id="_2-2-java数据类型" tabindex="-1"><a class="header-anchor" href="#_2-2-java数据类型" aria-hidden="true">#</a> 2.2 Java数据类型</h2><ul><li>Java数据类型分为两大类：基本数据类型、引用数据类型</li><li>基本数据类型中数值型[byte, short, int, long, float, double] char, boolean</li><li>引用类型[类, 接口, 数组]</li></ul><ol><li>基本数据类型 <ol><li>数值型 <ol><li>整数类型，存放整数 <ol><li>byte[1]</li><li>short[2]</li><li>int[4]</li><li>long[4]</li></ol></li><li>浮点（小数）类型 <ol><li>float[4]</li><li>double[8]</li></ol></li></ol></li><li>字符型 char[2]，存放单个字符</li><li>布尔型 boolean[1]，存放true和false</li></ol></li><li>引用数据类型 <ol><li>类 class</li><li>接口 interface</li><li>数组 []</li></ol></li></ol><h2 id="_2-3-整数类型" tabindex="-1"><a class="header-anchor" href="#_2-3-整数类型" aria-hidden="true">#</a> 2.3 整数类型</h2><h3 id="_2-3-1-整数类型的范围" tabindex="-1"><a class="header-anchor" href="#_2-3-1-整数类型的范围" aria-hidden="true">#</a> 2.3.1 整数类型的范围：</h3><ul><li>byte -128~127</li><li>short ...</li></ul><h3 id="_2-3-2-整数的使用细节" tabindex="-1"><a class="header-anchor" href="#_2-3-2-整数的使用细节" aria-hidden="true">#</a> 2.3.2 整数的使用细节</h3><ol><li>Java各整数类型有固定的范围和字段长度，不受具体的OS[操作系统]的影响，以保证Java程序的可移植性。</li><li>Java整型常量（具体值）默认为int型，声明long型常量须后面加&#39;l&#39;或&#39;L&#39;</li><li>Java程序变量常声明为int型，除非不足以表示大数才用long</li><li>bit是计算机的最小存储单位。byte：计算机中基本存储单位，1byte = 8bit。</li></ol><h2 id="_2-4-浮点类型" tabindex="-1"><a class="header-anchor" href="#_2-4-浮点类型" aria-hidden="true">#</a> 2.4 浮点类型</h2><h3 id="_2-4-1-浮点类型的范围" tabindex="-1"><a class="header-anchor" href="#_2-4-1-浮点类型的范围" aria-hidden="true">#</a> 2.4.1 浮点类型的范围：</h3><ul><li>float -3.403E38~3.403E38</li><li>double ...</li></ul><ol><li>关于浮点数在计算机中存放形式的简单说明，浮点数 = 符号位 + 指数位 + 尾数位</li><li>尾数部分可能丢失，造成精度损失（小数都是近似值）</li></ol><h3 id="_2-4-2-浮点型使用细节" tabindex="-1"><a class="header-anchor" href="#_2-4-2-浮点型使用细节" aria-hidden="true">#</a> 2.4.2 浮点型使用细节</h3><ol><li>与整数型类似，Java浮点类型有固定的范围和字段长度，不受具体的OS[操作系统]的影响。[float 4个字节，double 8个字节]</li><li>Java的浮点型常量（具体值）默认为double型，声明为float型常量须在后面加&#39;f&#39;或&#39;F&#39;</li><li>浮点型常量有两种表示形式 <ol><li>十进制表示法，如：如 5.12, 512.0f, .123（必须有小数点）</li><li>科学计数法，如 5.12e2【5.12*10^2】, 5.12E-2【5.12*10^-2】</li></ol></li></ol><h2 id="_2-5-java-api文档使用" tabindex="-1"><a class="header-anchor" href="#_2-5-java-api文档使用" aria-hidden="true">#</a> 2.5 Java API文档使用</h2><ol><li><p>API （Application Programing Interface，应用程序编程接口）是Java提供的基本编程接口（Java提供的类还有相关方法）。中文在线文档：https://www.matools.com</p></li><li><p>Java提供了大量的基础类，因此Oracle公司也为这些类提供了相应的API文档</p></li><li><p>Java类的组织形式【见示意图】：</p><p><img src="`+t+`" alt="Java类的组织形式"></p></li><li><p>通过包名查找类，或者直接检索</p></li></ol><h2 id="_2-6-字符类型-char" tabindex="-1"><a class="header-anchor" href="#_2-6-字符类型-char" aria-hidden="true">#</a> 2.6 字符类型（char）</h2><p>基本介绍：存放单个字符，2个byte大小</p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token char">&#39;中&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-1-使用细节" tabindex="-1"><a class="header-anchor" href="#_2-6-1-使用细节" aria-hidden="true">#</a> 2.6.1 使用细节</h3><ol><li>字符串常量使用单引号（&#39;&#39;）括起来的单个字符。例如：char c1 = &#39;a&#39;;</li><li>Java中还允许使用转义字符 &#39;&#39; 来将其后的字符转变为特殊字符型常量。例如：char c3 = &#39;\\n&#39;; \\n表示换行符</li><li>在Java中，char的本质是一个整数，在输出时是unicode码对应的字符</li><li>可以直接给char赋值一个整数，然后输出时他会按照unicode字符输出[97-&gt;a]</li><li>char类型是可以进行运算的，相当于一个整数，因为他有对应的unicode编码</li></ol><h3 id="_2-6-2-字符类型的本质" tabindex="-1"><a class="header-anchor" href="#_2-6-2-字符类型的本质" aria-hidden="true">#</a> 2.6.2 字符类型的本质</h3><ol><li>字符型存储到计算机时，需要将字符对应的码值，转换成二进制存储，比如&#39;a&#39; 存储：&#39;a&#39;=&gt;97=&gt;（二进制）110 0001=&gt;存储 读取：（二进制）110 0001=&gt;97=&gt;&#39;a&#39;=&gt;显示</li><li>字符和码值的对应关系是通过字符编码表决定的</li></ol><h2 id="_2-7-编码表" tabindex="-1"><a class="header-anchor" href="#_2-7-编码表" aria-hidden="true">#</a> 2.7 编码表</h2><blockquote><p>ASCII（128个字符 占用一个字节）</p><p>Unicode编码（固定大小的编码 使用两个字节表示字符，字母和汉字统一都是占用两个字节，这样浪费空间）</p><p>UTF-8（编码表，大小可变的编码，字母使用1个字节，汉字使用3个字节） GBK（可以表示汉字，而且范围广，字母使用1个字节，汉字2个字节）</p><p>GBK2312（可以表示汉字，GBK2312 &lt; GBK)</p><p>BIG5（繁体中文，台湾，香港）</p></blockquote><h2 id="_2-8-布尔类型" tabindex="-1"><a class="header-anchor" href="#_2-8-布尔类型" aria-hidden="true">#</a> 2.8 布尔类型</h2><p>true 和 false</p><h3 id="使用细节" tabindex="-1"><a class="header-anchor" href="#使用细节" aria-hidden="true">#</a> 使用细节</h3><p>不可以用0或非0的整数代替false和true，这点和C语言不同</p><h2 id="_2-9-自动类型转换" tabindex="-1"><a class="header-anchor" href="#_2-9-自动类型转换" aria-hidden="true">#</a> 2.9 自动类型转换</h2><h3 id="_2-9-1-介绍" tabindex="-1"><a class="header-anchor" href="#_2-9-1-介绍" aria-hidden="true">#</a> 2.9.1 介绍</h3><p>当Java程序在进行赋值或运算时，精度小的类型自动转换为精度大的数据类型，这个就是自动类型转换。</p><p><strong>数据类型按精度（容量）大小顺序排序为（背，规则）</strong></p><ul><li>char -&gt; int -&gt; long -&gt; float -&gt; double</li><li>byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConvert</span> <span class="token punctuation">{</span>

    <span class="token comment">// 编写一个main方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 演示自动转换</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span> <span class="token comment">// ok：char -&gt; int</span>
        <span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token comment">// ok：int -&gt; double</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 97</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 80.0</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-9-2-自动类型转换的细节" tabindex="-1"><a class="header-anchor" href="#_2-9-2-自动类型转换的细节" aria-hidden="true">#</a> 2.9.2 自动类型转换的细节</h3><ol><li>有多种类型的数据混合运算时，系统首先自动将所有的数据转换成容量最大的那种数据类型，然后再进行计算</li><li>当我们把精度（容量）大的数据类型赋值给精度（容量）小的数据类型时，就会报错，反之就会进行数据类型转换</li><li>(byte,short) 和 char 之间不会相互自动转换</li><li>byte, short, char 他们三者可以计算，在计算时首先转为int类型</li><li>boolean不参与运算</li><li>表达式结果的类型自动提升为操作数中最大的类型</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConvertDetail</span> <span class="token punctuation">{</span>
    <span class="token comment">// 编写一个main方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 细节1：有多种类型的数据混合运算时</span>
        <span class="token comment">// 系统首先自动将所有的数据转换成容量最大的那种数据类型，然后再进行计算</span>
        <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>
        <span class="token comment">// float d1 = n1 + 1.1; // 错误 n1 + 1.1 =&gt; 结果类型是 double</span>
        <span class="token comment">// double d1 = n1 + 1.1; // 对 n1 + 1.1 =&gt; 结果类型是 double</span>
        <span class="token keyword">float</span> d1 <span class="token operator">=</span> n1 <span class="token operator">+</span> <span class="token number">1.1f</span><span class="token punctuation">;</span> <span class="token comment">// 对 n1 + 1.1 =&gt; 结果类型是 float</span>

        <span class="token comment">// 细节2：当我们把精度（容量）大的数据类型赋值给精度（容量）小的数据类型时，就会报错，反之就会进行数据类型转换</span>
        <span class="token comment">// int n2 = 1.1;</span>

        <span class="token comment">// 细节3：(byte,short) 和 char 之间不会相互自动转换</span>
        <span class="token comment">// 当把具体数赋给byte时，(1)先判断该数是否在byte范围内，如果是就可以</span>
        <span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 对 -128~127</span>
        <span class="token comment">// int n2 = 1;</span>
        <span class="token comment">// b1 = n2; // 如果是按变量赋值，判断值的类型</span>
        <span class="token comment">// char c1 = b1; // 错误， 原因 byte 不能自动转成char</span>

        <span class="token comment">// 细节4：byte, short, char 他们三者可以计算，在计算时首先转为int类型。</span>
        <span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span> b3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// short s2 = b2 + s1; // 错， b2 + s1 =&gt; int</span>
        <span class="token keyword">int</span> s2 <span class="token operator">=</span> b2 <span class="token operator">+</span> s1<span class="token punctuation">;</span> <span class="token comment">// 对， b2 + s1 =&gt; int</span>
        <span class="token comment">// byte b4 = b2 + b3; // 错误，b2 + b3 =&gt; int</span>

        <span class="token comment">// 细节5：boolean不参与运算</span>
        <span class="token keyword">boolean</span> pass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token comment">// int num100 = pass; // 布尔类型不参与类型的自动转换</span>

        <span class="token comment">// 细节6：表达式结果的类型自动提升为操作数中最大的类型</span>
        <span class="token keyword">byte</span> b4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">short</span> s3 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num200 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> num300 <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>

        <span class="token keyword">double</span> num500 <span class="token operator">=</span> b3 <span class="token operator">+</span> s3 <span class="token operator">+</span> num200 <span class="token operator">+</span> num300<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-10-强制类型转换" tabindex="-1"><a class="header-anchor" href="#_2-10-强制类型转换" aria-hidden="true">#</a> 2.10 强制类型转换</h2><h3 id="_2-10-1-介绍" tabindex="-1"><a class="header-anchor" href="#_2-10-1-介绍" aria-hidden="true">#</a> 2.10.1 介绍</h3><p>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符()，但可能造成精度降低或溢出，格外要注意。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForceConver</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 演示强制类型转换</span>
        <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1.9</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;n1=&quot;</span> <span class="token operator">+</span> n1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1，造成精度损失</span>

        <span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>n2<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;b1=&quot;</span> <span class="token operator">+</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 造成数据溢出</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-10-2-强制类型转换细节说明" tabindex="-1"><a class="header-anchor" href="#_2-10-2-强制类型转换细节说明" aria-hidden="true">#</a> 2.10.2 强制类型转换细节说明</h3><ol><li>当进行数据的大小从 大-&gt;小，就需要使用强制类型转换</li><li>强转符号仅对最近的操作数有效，往往会使用小括号提升优先级</li><li>char类型可以保存int的常量值，但不能保存int的变量值，需要强转</li><li>byte和short,char类型进行运算时，当作int类型处理</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForceConverDetail</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 演示强制类型转换</span>
        <span class="token comment">// 强转符号仅对最近的操作数有效，往往会使用小括号提升优先级</span>
        <span class="token comment">// int x = (int)10 * 3.5 + 6 * 1.5; // 编译错误：double -&gt; int</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">3.5</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (int)44.0 -&gt; 44</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>
        <span class="token comment">// char c2 = m; //错误</span>
        <span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>m<span class="token punctuation">;</span> <span class="token comment">// ok</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对应字符d</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-10-3-强制类型转换练习题" tabindex="-1"><a class="header-anchor" href="#_2-10-3-强制类型转换练习题" aria-hidden="true">#</a> 2.10.3 强制类型转换练习题</h3><p>判断能否通过编译</p><ol><li><p>short s = 12; // ok</p><p>s = s - 9; // 错误 int -&gt; short</p></li><li><p>byte b = 10; // ok</p><p>b + 11; // 错误 int -&gt; byte</p><p>b = (byte)(b + 11); // 正确，使用强转</p></li><li><p>char c = &#39;a&#39;; // ok</p><p>int i = 16; // ok</p><p>float d = .314; // ok</p><p>double result = c + i + d; // ok float -&gt; double</p></li><li><p>byte b = 16; // ok</p><p>short s = 14; // ok</p><p>short t = s + b; // 错误 int -&gt; short</p></li></ol><h2 id="_2-11-基本数据类型和string类型的转换" tabindex="-1"><a class="header-anchor" href="#_2-11-基本数据类型和string类型的转换" aria-hidden="true">#</a> 2.11 基本数据类型和String类型的转换</h2><ul><li><p>介绍</p><p>在开发程序中，我们经常需要将一些基本数据类型转换为String类型。或者将String类型转换成基本数据类型。</p></li><li><p>基本类型转String类型</p><p>语法：将基本类型的值+&quot;&quot;即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToBasic</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 基本数据类型 -&gt; String</span>
        <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">1.1f</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">4.5</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s1 <span class="token operator">=</span> n1 <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s2 <span class="token operator">=</span> f1 <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s3 <span class="token operator">=</span> d1 <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s4 <span class="token operator">=</span> b1 <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> s2 <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> s3 <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>String类型转基本数据类型</p><p>语法：通过基本类型的包装类调用parseXX方法即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToBasic</span> <span class="token punctuation">{</span>
       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token comment">// 基本数据类型 -&gt; String</span>
           <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
           <span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">1.1f</span><span class="token punctuation">;</span>
           <span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">4.5</span><span class="token punctuation">;</span>
           <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
           <span class="token class-name">String</span> s1 <span class="token operator">=</span> n1 <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
           <span class="token class-name">String</span> s2 <span class="token operator">=</span> f1 <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
           <span class="token class-name">String</span> s3 <span class="token operator">=</span> d1 <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
           <span class="token class-name">String</span> s4 <span class="token operator">=</span> b1 <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> s2 <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> s3 <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;======================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

           <span class="token comment">// String -&gt; 对应的基本数据类型</span>
           <span class="token comment">// 使用基本数据类型对应包装类的相应方法，得到基本数据类型</span>
           <span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
           <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">double</span> num2 <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">float</span> num3 <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">long</span> num4 <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">byte</span> num5 <span class="token operator">=</span> <span class="token class-name">Byte</span><span class="token punctuation">.</span><span class="token function">parseByte</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">short</span> num6 <span class="token operator">=</span> <span class="token class-name">Short</span><span class="token punctuation">.</span><span class="token function">parseShort</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

           <span class="token comment">// 把字符串转成字符，含义：把字符串第一个字符取到</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-11-1-注意事项" tabindex="-1"><a class="header-anchor" href="#_2-11-1-注意事项" aria-hidden="true">#</a> 2.11.1 注意事项</h3><ol><li><p>在将String转为基本数据类型时，要确保String类型能够转换成有效的数据</p><p>比如我们可以把“123”转换成一个整数，但是不能把“hello”转成整数</p></li><li><p>如果格式不正确则会抛出异常，程序终止</p></li></ol><h2 id="_2-12-本章作业" tabindex="-1"><a class="header-anchor" href="#_2-12-本章作业" aria-hidden="true">#</a> 2.12 本章作业</h2><ol><li>阅读程序看看输出什么</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework01</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n1<span class="token punctuation">;</span>
        n1 <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n2<span class="token punctuation">;</span>
        n2 <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n3<span class="token punctuation">;</span>
        n3 <span class="token operator">=</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;n3 = &quot;</span> <span class="token operator">+</span> n3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n4 <span class="token operator">=</span> <span class="token number">38</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n5 <span class="token operator">=</span> n4 <span class="token operator">-</span> n3<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;n5 = &quot;</span> <span class="token operator">+</span> n5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>答：</p><p>30</p><p>8</p></blockquote><ol start="2"><li>使用char类型，分别保存\\n \\t \\r \\\\ 1 2 3等字符，并打印输出</li></ol><blockquote><p>答：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework02</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 换行</span>
        <span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token char">&#39;\\t&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 制表位</span>
        <span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token char">&#39;\\r&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 回车</span>
        <span class="token keyword">char</span> c4 <span class="token operator">=</span> <span class="token char">&#39;\\\\&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 输出 \\</span>
        <span class="token keyword">char</span> c5 <span class="token operator">=</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span> c6 <span class="token operator">=</span> <span class="token char">&#39;2&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span> c7 <span class="token operator">=</span> <span class="token char">&#39;3&#39;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c5<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c6<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c7<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>`,74),c=[o];function l(i,u){return s(),a("div",null,c)}const k=n(e,[["render",l],["__file","第2章-变量.html.vue"]]);export{k as default};
