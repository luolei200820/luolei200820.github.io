import{_ as n,p as s,q as a,a1 as e}from"./framework-6f85e614.js";const p={},t=e(`<h1 id="第6章-接口、lambda表达式与内部类" tabindex="-1"><a class="header-anchor" href="#第6章-接口、lambda表达式与内部类" aria-hidden="true">#</a> 第6章 接口、lambda表达式与内部类</h1><h2 id="_6-1-接口" tabindex="-1"><a class="header-anchor" href="#_6-1-接口" aria-hidden="true">#</a> 6.1 接口</h2><p>接口用来描述类应该做什么，而不指定类具体应该如何去做，是类的行为规范。一个类可以实现一个或多个接口。</p><p>举例：</p><p>使用Arrays类的sort方法对Employee数组进行排序</p><p>为泛型Comparable接口提供一个类型参数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">// 对接口中的所有方法提供定义</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> other<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>salary<span class="token punctuation">,</span>other<span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-1-2-接口的属性" tabindex="-1"><a class="header-anchor" href="#_6-1-2-接口的属性" aria-hidden="true">#</a> 6.1.2 接口的属性</h3><p>接口不是类，因此不能用new关键字实例化。可以声明接口变量，必须为其赋值为实现了这个接口的类的对象。也可以使用instanceof检查一个对象是否实现了接口。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ERROR</span>
<span class="token class-name">Comparable</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>

<span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">Comparable</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与类的继承层次类似，也可以扩展接口，同样只能单继承。虽然在接口中不能包含实例字段，但是可以包含常量，与方法被声明为<code>public abstract</code>一样，常量被声明为<code>public static final</code>。虽然书写关键字有助于提高代码的清晰度，但Java语言规范建议不要提供多余的关键字。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Moveable</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span><span class="token keyword">double</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Powered</span> <span class="token keyword">extends</span> <span class="token class-name">Moveable</span>
<span class="token punctuation">{</span>
    <span class="token keyword">double</span> <span class="token function">milesPerGallon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a public abstract</span>
    <span class="token keyword">double</span> <span class="token constant">SPEED_LIMIT</span> <span class="token operator">=</span> <span class="token number">95</span><span class="token punctuation">;</span> <span class="token comment">// a public static final</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-1-3-接口与抽象类" tabindex="-1"><a class="header-anchor" href="#_6-1-3-接口与抽象类" aria-hidden="true">#</a> 6.1.3 接口与抽象类</h3><p>可以同时实现多个接口，也可以继承之后实现一个或多个接口。使用继承而不是抽象类的原因在于，Java只允许单继承而不允许多继承，如果一个类已经扩展了一个类，那么它就不能再继承第二个类了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span><span class="token class-name">Cloneable</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6-1-4-静态和私有方法" tabindex="-1"><a class="header-anchor" href="#_6-1-4-静态和私有方法" aria-hidden="true">#</a> 6.1.4 静态和私有方法</h3><p>在Java 8之后可以为接口提供静态方法，虽然这有违将接口作为抽象规范的初衷。这样一来就不需要为实用方法提供一个实现类。反例可以参考标准库中的Path接口和Paths实现类。</p><p>在Java 9之后接口的方法可以是私有的，包括静态方法和实例方法，但这种用途十分有限，因为只能在接口中使用，只能作为其他方法的辅助方法。</p><h3 id="_6-1-5-默认方法" tabindex="-1"><a class="header-anchor" href="#_6-1-5-默认方法" aria-hidden="true">#</a> 6.1.5 默认方法</h3><p>可以为接口的方法加上default关键字将其设置为默认方法，这么做的目的是为了修改接口时实现类无需修改。</p><p>如果接口新增加了一个方法，那么实现类将无法通过编译，如果仅仅只是包含这个类的JAR文件或者.class文件，那么可以正常构造对象，但是如果在对象上调用新增加的方法会抛出一个AbstractMethodError。将方法设置为默认（default）方法，实现类就又能够重新编译了，如果实现类没有重新定义新方法，那么调用新方法将调用接口中定义的默认方法。</p><p>直接调用接口的默认方法的语法：接口名.super.方法名</p><h3 id="_6-1-6-解决默认方法冲突" tabindex="-1"><a class="header-anchor" href="#_6-1-6-解决默认方法冲突" aria-hidden="true">#</a> 6.1.6 解决默认方法冲突</h3><p>如果一个接口中的方法定义为默认方法，然后超类或者另一个接口中定义了同样的方法，Java的解决规则如下：</p><ol><li>超类优先。如果超类定义了一个具体方法，那么接口中同名并且参数相同的方法会被忽略。</li><li>接口冲突。如果接口定义了一个默认方法，另一个接口中定义了一个同名且参数相同的方法，那么实现类必须重写这个方法来解决冲突。</li></ol><h3 id="_6-1-7-接口与回调" tabindex="-1"><a class="header-anchor" href="#_6-1-7-接口与回调" aria-hidden="true">#</a> 6.1.7 接口与回调</h3><p>可以向定时器（java.swing.Timer）传入一个类的对象，这个类实现了java.awt.event.ActionListener接口。定时器会在你设定的间隔时间循环调用这个对象的actionPerformed方法。</p><p>例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimerTest</span>
<span class="token punctuation">{</span>  
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
   <span class="token punctuation">{</span>  
      <span class="token keyword">var</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimePrinter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// construct a timer that calls the listener</span>
      <span class="token comment">// once every second</span>
      <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
      timer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// keep program running until the user selects &quot;OK&quot;</span>
      <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;Quit program?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">TimePrinter</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span>
<span class="token punctuation">{</span>  
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> event<span class="token punctuation">)</span>
   <span class="token punctuation">{</span>  
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;At the tone, the time is &quot;</span> 
         <span class="token operator">+</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">ofEpochMilli</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getWhen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">Toolkit</span><span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">beep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-1-8-comparator接口" tabindex="-1"><a class="header-anchor" href="#_6-1-8-comparator接口" aria-hidden="true">#</a> 6.1.8 Comparator接口</h3><p>在之前介绍的Arrays.sort方法要求类实现了Comparable接口，String类实现了Comparable接口，它默认是按字典顺序排序的。</p><p>假设现在我们需要按照字符串长度进行排序，为此更改String类的实现是不合理的，于是Arrays.sort方法还有另一个版本，第一个参数是数组，第二个参数是比较器（comparator）。</p><p>例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">T</span> first<span class="token punctuation">,</span><span class="token class-name">T</span> seconnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">LengthComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">String</span> first<span class="token punctuation">,</span><span class="token class-name">String</span> second<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> first<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> second<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在比较时</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>friends<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">LengthComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34),c=[t];function o(l,i){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","第6章-接口、lambda表达式与内部类.html.vue"]]);export{r as default};
